{
  "address": "0x3BD798CaEAb5602fE7aCE9dbFFa793d123449fA9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_addressToAmountFunder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withDraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc3974859a9f9ae39d41e01f852189c6c43b8bb1ae196ed698dab556ad7985136",
  "receipt": {
    "to": null,
    "from": "0x96B10F1DCF952C9Abb73be94BE4feC6501E93BB5",
    "contractAddress": "0x3BD798CaEAb5602fE7aCE9dbFFa793d123449fA9",
    "transactionIndex": 12,
    "gasUsed": "981061",
    "logsBloom": "0x
    "blockHash": "0x8784f37b28a182230f83b417f706ab88445704c216a18923835ecfa5da285471",
    "transactionHash": "0xc3974859a9f9ae39d41e01f852189c6c43b8bb1ae196ed698dab556ad7985136",
    "logs": [],
    "blockNumber": 11331132,
    "cumulativeGasUsed": "4190306",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 2,
  "solcInputHash": "0d02595942418683d247510d3c0c527d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToAmountFunder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"this implement price feed of our library\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"this function funds this contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n//import\\nimport \\\"./PriceConverter.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n//error\\nerror FundMe_NotOwner();\\n\\n//Interface, library, contract\\n\\ncontract FundMe{\\n\\n    //Type declare\\n    using  PriceConverter for uint256;\\n\\n    //State variable\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    address[] public s_funders;\\n    mapping(address => uint256) public s_addressToAmountFunder;\\n    address public immutable i_owner;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    //Modifier\\n    modifier onlyOwner(){\\n        require(msg.sender == i_owner, \\\"sender not owner\\\");\\n        _;\\n    }\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    constructor(address priceFeedAddress){\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable{\\n        fund();\\n    }\\n\\n    fallback() external payable{\\n        fund();\\n    }\\n    \\n    /** @notice this function funds this contract\\n     *  @dev this implement price feed of our library\\n     */\\n    function fund() public payable{\\n        //require(getConversionRate(msg.value) >= minUsd,\\\"not send\\\");\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\\"not send\\\");\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunder[msg.sender]= msg.value;\\n    }\\n\\n    function withDraw() public onlyOwner{\\n        \\n        for(uint256 funderIndex = 0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunder[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // //transfer 2300 gas still errror\\n        // payable(msg.sender).transfer(address(this).ballance);\\n        // //send 2300 gas return bool\\n        // bool sendSuccess = payable(msg.sender).send(address(this).ballance);\\n        // require(sendSuccess, \\\"sendFail\\\");\\n        //call fowward all gas or set gas, returns bool\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess,\\\"Call Failed\\\");\\n    }\\n    function cheaperWithdraw() public payable onlyOwner{\\n        address[] memory funders = s_funders;\\n        for(uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunder[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) =    i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n    \\n    \\n}\",\"keccak256\":\"0x32285e884c0e8f88a5d8cde9b0c2360bba0804f2498b729a3f89c7315aa40c03\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        // Rinkeby ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n        // );\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\",\"keccak256\":\"0x80244c2cd977fe48812ab497e207deae851f63ba7cbc5eea1d00fc63e53c6c58\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620011e9380380620011e9833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c61106362000186600039600081816102b3015281816105480152818161074701526107df01526110636000f3fe6080604052600436106100745760003560e01c8063b60d42881161004e578063b60d42881461010c578063be2693f014610116578063dba6335f14610120578063f0dcf48d1461014b57610083565b80630fdb1c101461008d57806354861af7146100a45780636b69a592146100e157610083565b3661008357610081610188565b005b61008b610188565b005b34801561009957600080fd5b506100a26102b1565b005b3480156100b057600080fd5b506100cb60048036038101906100c691906109d7565b6104fa565b6040516100d89190610a45565b60405180910390f35b3480156100ed57600080fd5b506100f6610539565b6040516101039190610a6f565b60405180910390f35b610114610188565b005b61011e610546565b005b34801561012c57600080fd5b506101356107dd565b6040516101429190610a45565b60405180910390f35b34801561015757600080fd5b50610172600480360381019061016d9190610ab6565b610801565b60405161017f9190610a6f565b60405180910390f35b6802b5e3af16b18800006101c7600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461081990919063ffffffff16565b1015610208576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ff90610b40565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461033f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033690610bac565b60405180910390fd5b60005b6000805490508110156103ea57600080828154811061036457610363610bcc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103e290610c2a565b915050610342565b50600067ffffffffffffffff81111561040657610405610c73565b5b6040519080825280602002602001820160405280156104345781602001602082028036833780820191505090505b506000908051906020019061044a9291906108f5565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161047190610cd3565b60006040518083038185875af1925050503d80600081146104ae576040519150601f19603f3d011682016040523d82523d6000602084013e6104b3565b606091505b50509050806104f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ee90610d34565b60405180910390fd5b50565b6000818154811061050a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cb90610bac565b60405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561065757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161060d575b5050505050905060005b81518110156106e257600082828151811061067f5761067e610bcc565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806106da90610c2a565b915050610661565b50600067ffffffffffffffff8111156106fe576106fd610c73565b5b60405190808252806020026020018201604052801561072c5781602001602082028036833780820191505090505b50600090805190602001906107429291906108f5565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161078990610cd3565b60006040518083038185875af1925050503d80600081146107c6576040519150601f19603f3d011682016040523d82523d6000602084013e6107cb565b606091505b50509050806107d957600080fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60016020528060005260406000206000915090505481565b60008061082583610855565b90506000670de0b6b3a7640000858361083e9190610d54565b6108489190610ddd565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561089e57600080fd5b505afa1580156108b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d69190610e9b565b5050509150506402540be400816108ed9190610f16565b915050919050565b82805482825590600052602060002090810192821561096e579160200282015b8281111561096d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610915565b5b50905061097b919061097f565b5090565b5b80821115610998576000816000905550600101610980565b5090565b600080fd5b6000819050919050565b6109b4816109a1565b81146109bf57600080fd5b50565b6000813590506109d1816109ab565b92915050565b6000602082840312156109ed576109ec61099c565b5b60006109fb848285016109c2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a2f82610a04565b9050919050565b610a3f81610a24565b82525050565b6000602082019050610a5a6000830184610a36565b92915050565b610a69816109a1565b82525050565b6000602082019050610a846000830184610a60565b92915050565b610a9381610a24565b8114610a9e57600080fd5b50565b600081359050610ab081610a8a565b92915050565b600060208284031215610acc57610acb61099c565b5b6000610ada84828501610aa1565b91505092915050565b600082825260208201905092915050565b7f6e6f742073656e64000000000000000000000000000000000000000000000000600082015250565b6000610b2a600883610ae3565b9150610b3582610af4565b602082019050919050565b60006020820190508181036000830152610b5981610b1d565b9050919050565b7f73656e646572206e6f74206f776e657200000000000000000000000000000000600082015250565b6000610b96601083610ae3565b9150610ba182610b60565b602082019050919050565b60006020820190508181036000830152610bc581610b89565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c35826109a1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c6857610c67610bfb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cbd600083610ca2565b9150610cc882610cad565b600082019050919050565b6000610cde82610cb0565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610d1e600b83610ae3565b9150610d2982610ce8565b602082019050919050565b60006020820190508181036000830152610d4d81610d11565b9050919050565b6000610d5f826109a1565b9150610d6a836109a1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610da357610da2610bfb565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610de8826109a1565b9150610df3836109a1565b925082610e0357610e02610dae565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e2d81610e0e565b8114610e3857600080fd5b50565b600081519050610e4a81610e24565b92915050565b6000819050919050565b610e6381610e50565b8114610e6e57600080fd5b50565b600081519050610e8081610e5a565b92915050565b600081519050610e95816109ab565b92915050565b600080600080600060a08688031215610eb757610eb661099c565b5b6000610ec588828901610e3b565b9550506020610ed688828901610e71565b9450506040610ee788828901610e86565b9350506060610ef888828901610e86565b9250506080610f0988828901610e3b565b9150509295509295909350565b6000610f2182610e50565b9150610f2c83610e50565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610f6b57610f6a610bfb565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610fa857610fa7610bfb565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610fe557610fe4610bfb565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561102257611021610bfb565b5b82820290509291505056fea2646970667358221220494ed9ed0aa9ef8773d34617aeadf2b1879d9ef0439f6b8b7e143d5e7002f94d64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063b60d42881161004e578063b60d42881461010c578063be2693f014610116578063dba6335f14610120578063f0dcf48d1461014b57610083565b80630fdb1c101461008d57806354861af7146100a45780636b69a592146100e157610083565b3661008357610081610188565b005b61008b610188565b005b34801561009957600080fd5b506100a26102b1565b005b3480156100b057600080fd5b506100cb60048036038101906100c691906109d7565b6104fa565b6040516100d89190610a45565b60405180910390f35b3480156100ed57600080fd5b506100f6610539565b6040516101039190610a6f565b60405180910390f35b610114610188565b005b61011e610546565b005b34801561012c57600080fd5b506101356107dd565b6040516101429190610a45565b60405180910390f35b34801561015757600080fd5b50610172600480360381019061016d9190610ab6565b610801565b60405161017f9190610a6f565b60405180910390f35b6802b5e3af16b18800006101c7600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461081990919063ffffffff16565b1015610208576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ff90610b40565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461033f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033690610bac565b60405180910390fd5b60005b6000805490508110156103ea57600080828154811061036457610363610bcc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103e290610c2a565b915050610342565b50600067ffffffffffffffff81111561040657610405610c73565b5b6040519080825280602002602001820160405280156104345781602001602082028036833780820191505090505b506000908051906020019061044a9291906108f5565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161047190610cd3565b60006040518083038185875af1925050503d80600081146104ae576040519150601f19603f3d011682016040523d82523d6000602084013e6104b3565b606091505b50509050806104f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ee90610d34565b60405180910390fd5b50565b6000818154811061050a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cb90610bac565b60405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561065757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161060d575b5050505050905060005b81518110156106e257600082828151811061067f5761067e610bcc565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806106da90610c2a565b915050610661565b50600067ffffffffffffffff8111156106fe576106fd610c73565b5b60405190808252806020026020018201604052801561072c5781602001602082028036833780820191505090505b50600090805190602001906107429291906108f5565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161078990610cd3565b60006040518083038185875af1925050503d80600081146107c6576040519150601f19603f3d011682016040523d82523d6000602084013e6107cb565b606091505b50509050806107d957600080fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60016020528060005260406000206000915090505481565b60008061082583610855565b90506000670de0b6b3a7640000858361083e9190610d54565b6108489190610ddd565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561089e57600080fd5b505afa1580156108b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d69190610e9b565b5050509150506402540be400816108ed9190610f16565b915050919050565b82805482825590600052602060002090810192821561096e579160200282015b8281111561096d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610915565b5b50905061097b919061097f565b5090565b5b80821115610998576000816000905550600101610980565b5090565b600080fd5b6000819050919050565b6109b4816109a1565b81146109bf57600080fd5b50565b6000813590506109d1816109ab565b92915050565b6000602082840312156109ed576109ec61099c565b5b60006109fb848285016109c2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a2f82610a04565b9050919050565b610a3f81610a24565b82525050565b6000602082019050610a5a6000830184610a36565b92915050565b610a69816109a1565b82525050565b6000602082019050610a846000830184610a60565b92915050565b610a9381610a24565b8114610a9e57600080fd5b50565b600081359050610ab081610a8a565b92915050565b600060208284031215610acc57610acb61099c565b5b6000610ada84828501610aa1565b91505092915050565b600082825260208201905092915050565b7f6e6f742073656e64000000000000000000000000000000000000000000000000600082015250565b6000610b2a600883610ae3565b9150610b3582610af4565b602082019050919050565b60006020820190508181036000830152610b5981610b1d565b9050919050565b7f73656e646572206e6f74206f776e657200000000000000000000000000000000600082015250565b6000610b96601083610ae3565b9150610ba182610b60565b602082019050919050565b60006020820190508181036000830152610bc581610b89565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c35826109a1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c6857610c67610bfb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cbd600083610ca2565b9150610cc882610cad565b600082019050919050565b6000610cde82610cb0565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610d1e600b83610ae3565b9150610d2982610ce8565b602082019050919050565b60006020820190508181036000830152610d4d81610d11565b9050919050565b6000610d5f826109a1565b9150610d6a836109a1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610da357610da2610bfb565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610de8826109a1565b9150610df3836109a1565b925082610e0357610e02610dae565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e2d81610e0e565b8114610e3857600080fd5b50565b600081519050610e4a81610e24565b92915050565b6000819050919050565b610e6381610e50565b8114610e6e57600080fd5b50565b600081519050610e8081610e5a565b92915050565b600081519050610e95816109ab565b92915050565b600080600080600060a08688031215610eb757610eb661099c565b5b6000610ec588828901610e3b565b9550506020610ed688828901610e71565b9450506040610ee788828901610e86565b9350506060610ef888828901610e86565b9250506080610f0988828901610e3b565b9150509295509295909350565b6000610f2182610e50565b9150610f2c83610e50565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610f6b57610f6a610bfb565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610fa857610fa7610bfb565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610fe557610fe4610bfb565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561102257611021610bfb565b5b82820290509291505056fea2646970667358221220494ed9ed0aa9ef8773d34617aeadf2b1879d9ef0439f6b8b7e143d5e7002f94d64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "this implement price feed of our library"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "this function funds this contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunder",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}